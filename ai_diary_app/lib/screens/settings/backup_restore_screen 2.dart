import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';
import 'package:file_picker/file_picker.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../../l10n/app_localizations.dart';
import '../../providers/subscription_provider.dart';
import '../../services/database_service.dart';
import '../../services/google_drive_service.dart';
import '../../services/auth_service.dart';

class BackupRestoreScreen extends ConsumerWidget {
  const BackupRestoreScreen({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final subscription = ref.watch(subscriptionProvider);

    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: AppBar(
        title: const Text(
          'Î∞±ÏóÖ Î∞è Î≥µÏõê',
          style: TextStyle(
            color: Color(0xFF2D3748),
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.white,
        foregroundColor: const Color(0xFF2D3748),
        elevation: 0,
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          // Î°úÏª¨ Î∞±ÏóÖ/Î≥µÏõê ÏÑπÏÖò
          _buildSectionTitle(context, 'Î°úÏª¨ Î∞±ÏóÖ/Î≥µÏõê'),
          _buildSettingsTile(
            icon: Icons.backup,
            title: AppLocalizations.of(context).dataBackup,
            subtitle: AppLocalizations.of(context).dataBackupSubtitle,
            onTap: () => _showBackupDialog(context, ref),
          ),
          _buildSettingsTile(
            icon: Icons.restore,
            title: AppLocalizations.of(context).dataRestore,
            subtitle: AppLocalizations.of(context).dataRestoreSubtitle,
            onTap: () => _showRestoreDialog(context),
          ),

          const SizedBox(height: 24),

          // ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ/Î≥µÏõê ÏÑπÏÖò
          _buildSectionTitle(context, 'ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ/Î≥µÏõê'),
          _buildSettingsTile(
            icon: Icons.cloud_upload,
            title: 'ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ',
            subtitle: 'Google DriveÏóê ÏùºÍ∏∞Î•º Î∞±ÏóÖÌï©ÎãàÎã§',
            onTap: subscription.isPremium
              ? () => _showCloudBackupDialog(context)
              : () => _showPremiumRequiredDialog(context),
          ),
          _buildSettingsTile(
            icon: Icons.cloud_download,
            title: 'ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê',
            subtitle: 'Google DriveÏóêÏÑú ÏùºÍ∏∞Î•º Î≥µÏõêÌï©ÎãàÎã§',
            onTap: subscription.isPremium
              ? () => _showCloudRestoreDialog(context)
              : () => _showPremiumRequiredDialog(context),
          ),
        ],
      ),
    );
  }

  Widget _buildSectionTitle(BuildContext context, String title) {
    return Padding(
      padding: const EdgeInsets.fromLTRB(4, 0, 4, 12),
      child: Text(
        title,
        style: Theme.of(context).textTheme.titleMedium?.copyWith(
          fontWeight: FontWeight.bold,
          color: const Color(0xFF4A5568),
        ),
      ),
    );
  }

  Widget _buildSettingsTile({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback onTap,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      child: ListTile(
        leading: Container(
          padding: const EdgeInsets.all(8),
          decoration: BoxDecoration(
            color: const Color(0xFF667EEA).withOpacity(0.1),
            borderRadius: BorderRadius.circular(8),
          ),
          child: Icon(
            icon,
            color: const Color(0xFF667EEA),
            size: 20,
          ),
        ),
        title: Text(
          title,
          style: const TextStyle(
            fontWeight: FontWeight.w600,
            color: Color(0xFF2D3748),
          ),
        ),
        subtitle: Text(
          subtitle,
          style: const TextStyle(
            color: Color(0xFF718096),
            fontSize: 13,
          ),
        ),
        trailing: const Icon(
          Icons.chevron_right,
          color: Color(0xFF9CA3AF),
        ),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
        tileColor: Colors.white,
        onTap: onTap,
      ),
    );
  }

  Future<void> _showBackupDialog(BuildContext context, WidgetRef ref) async {
    final subscription = ref.read(subscriptionProvider);
    final scaffoldContext = context;  // ÏõêÎûò Scaffold context Ï†ÄÏû•

    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: Text(AppLocalizations.of(dialogContext).dataBackupTitle),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(subscription.isPremium
              ? AppLocalizations.of(dialogContext).backupDescription
              : 'Î¨¥Î£å ÏÇ¨Ïö©ÏûêÎäî ÏùºÍ∏∞ Ï†úÎ™©, ÎÇ¥Ïö©, ÎÇ†ÏßúÎ•º JSON ÌòïÏãùÏúºÎ°ú Î∞±ÏóÖÌï† Ïàò ÏûàÏäµÎãàÎã§.'),
            const SizedBox(height: 12),
            Text(AppLocalizations.of(dialogContext).backupIncludes, style: const TextStyle(fontWeight: FontWeight.w600)),
            const SizedBox(height: 8),
            _buildBackupItem('üìù', AppLocalizations.of(dialogContext).backupDiaryContent),
            _buildBackupItem('üìÖ', AppLocalizations.of(dialogContext).backupDateTime),
            if (subscription.isPremium) ...[
              _buildBackupItem('üòä', AppLocalizations.of(dialogContext).backupEmotionAnalysis),
              _buildBackupItem('üñºÔ∏è', AppLocalizations.of(dialogContext).backupGeneratedImages),
              _buildBackupItem('üé®', AppLocalizations.of(dialogContext).backupImageStyle),
            ] else ...[
              Container(
                margin: const EdgeInsets.only(top: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: Colors.amber.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(6),
                  border: Border.all(color: Colors.amber),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.lock, color: Colors.amber, size: 16),
                    const SizedBox(width: 6),
                    Expanded(
                      child: Text(
                        'ÌîÑÎ¶¨ÎØ∏ÏóÑ: Í∞êÏ†ï Î∂ÑÏÑù, ÏÉùÏÑ± Ïù¥ÎØ∏ÏßÄ, AI ÌîÑÎ°¨ÌîÑÌä∏ Ìè¨Ìï®',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.amber.shade700,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: Text(AppLocalizations.of(dialogContext).cancel),
          ),
          FilledButton(
            onPressed: () async {
              Navigator.pop(dialogContext);
              await _performBackup(scaffoldContext, ref);  // Scaffold context ÏÇ¨Ïö©
            },
            child: Text(AppLocalizations.of(dialogContext).backupStart),
          ),
        ],
      ),
    );
  }

  Widget _buildBackupItem(String emoji, String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 2),
      child: Row(
        children: [
          Text(emoji, style: const TextStyle(fontSize: 14)),
          const SizedBox(width: 8),
          Expanded(child: Text(text, style: const TextStyle(fontSize: 13))),
        ],
      ),
    );
  }

  Future<void> _performBackup(BuildContext context, WidgetRef ref) async {
    try {
      final subscription = ref.read(subscriptionProvider);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              const SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
              const SizedBox(width: 12),
              Text(AppLocalizations.of(context).backingUp),
            ],
          ),
          duration: const Duration(seconds: 3),
        ),
      );

      final diaries = await DatabaseService.getAllDiaries();
      final timestamp = DateTime.now().millisecondsSinceEpoch;

      if (subscription.isPremium) {
        // DatabaseServiceÏùò ÌëúÏ§Ä exportToJson ÏÇ¨Ïö©
        final jsonString = await DatabaseService.exportToJson(isPremium: true);
        final bytes = utf8.encode(jsonString);

        // FilePickerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ï†ÄÏû• ÏúÑÏπò ÏÑ†ÌÉù
        final String? outputPath = await FilePicker.platform.saveFile(
          dialogTitle: 'Î∞±ÏóÖ ÌååÏùº Ï†ÄÏû• ÏúÑÏπò ÏÑ†ÌÉù',
          fileName: 'ai_diary_premium_backup_$timestamp.json',
          type: FileType.custom,
          allowedExtensions: ['json'],
          bytes: Uint8List.fromList(bytes),
        );

        if (outputPath == null) {
          // ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜåÌï®
          if (context.mounted) {
            ScaffoldMessenger.of(context).clearSnackBars();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Î∞±ÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§'),
                backgroundColor: Colors.orange,
              ),
            );
          }
          return;
        }

        // ÌîÑÎ¶¨ÎØ∏ÏóÑ Î∞±ÏóÖ ÏÑ±Í≥µ
        if (context.mounted) {
          ScaffoldMessenger.of(context).clearSnackBars();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white),
                  const SizedBox(width: 12),
                  Text('${diaries.length}Í∞ú ÏùºÍ∏∞Í∞Ä ÏôÑÏ†ÑÌûà Î∞±ÏóÖÎêòÏóàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        }
        return;
      } else {
        // Î¨¥Î£å ÏÇ¨Ïö©ÏûêÎèÑ JSON ÌòïÏãùÏúºÎ°ú Î∞±ÏóÖ (ÌîÑÎ¶¨ÎØ∏ÏóÑ ÌïÑÎìú Ï†úÏô∏)
        final jsonString = await DatabaseService.exportToJson(isPremium: false);
        final bytes = utf8.encode(jsonString);

        // FilePickerÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Ï†ÄÏû• ÏúÑÏπò ÏÑ†ÌÉù
        final String? outputPath = await FilePicker.platform.saveFile(
          dialogTitle: 'Î∞±ÏóÖ ÌååÏùº Ï†ÄÏû• ÏúÑÏπò ÏÑ†ÌÉù',
          fileName: 'ai_diary_backup_$timestamp.json',
          type: FileType.custom,
          allowedExtensions: ['json'],
          bytes: Uint8List.fromList(bytes),
        );

        if (outputPath == null) {
          // ÏÇ¨Ïö©ÏûêÍ∞Ä Ï∑®ÏÜåÌï®
          if (context.mounted) {
            ScaffoldMessenger.of(context).clearSnackBars();
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('Î∞±ÏóÖÏù¥ Ï∑®ÏÜåÎêòÏóàÏäµÎãàÎã§'),
                backgroundColor: Colors.orange,
              ),
            );
          }
          return;
        }

        // Î¨¥Î£å ÏÇ¨Ïö©Ïûê Î∞±ÏóÖ ÏÑ±Í≥µ
        if (context.mounted) {
          ScaffoldMessenger.of(context).clearSnackBars();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white),
                  const SizedBox(width: 12),
                  Text('${diaries.length}Í∞ú ÏùºÍ∏∞Í∞Ä Î∞±ÏóÖÎêòÏóàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        }
        return;
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(AppLocalizations.of(context).backupFailed(e.toString())),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  void _showRestoreDialog(BuildContext context) {
    final scaffoldContext = context;  // ÏõêÎûò Scaffold context Ï†ÄÏû•

    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: Text(AppLocalizations.of(dialogContext).dataRestoreTitle),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(AppLocalizations.of(dialogContext).restoreDescription),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange),
              ),
              child: const Row(
                children: [
                  Icon(Icons.warning, color: Colors.orange, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'ÌòÑÏû¨ Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Îäî Î™®Îëê ÏÇ≠Ï†úÎêòÍ≥†\nÎ∞±ÏóÖ ÌååÏùºÎ°ú ÎåÄÏ≤¥Îê©ÎãàÎã§',
                      style: TextStyle(fontSize: 13, color: Colors.orange),
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue),
              ),
              child: const Row(
                children: [
                  Icon(Icons.info_outline, color: Colors.blue, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'ÌååÏùº ÏÑ†ÌÉù ÌôîÎ©¥ÏóêÏÑú Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäºÏúºÎ°ú\nÏñ∏Ï†úÎì†ÏßÄ Ï∑®ÏÜåÌï† Ïàò ÏûàÏäµÎãàÎã§',
                      style: TextStyle(fontSize: 13, color: Colors.blue),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: Text(AppLocalizations.of(dialogContext).cancel),
          ),
          FilledButton(
            onPressed: () async {
              Navigator.pop(dialogContext);
              await _performRestore(scaffoldContext);  // Scaffold context ÏÇ¨Ïö©
            },
            child: const Text('ÌååÏùº ÏÑ†ÌÉù'),
          ),
        ],
      ),
    );
  }

  Future<void> _performRestore(BuildContext context) async {
    try {
      // ÌååÏùº ÏÑ†ÌÉù
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['json', 'txt'],
      );

      if (result == null) {
        // ÏÇ¨Ïö©ÏûêÍ∞Ä ÌååÏùº ÏÑ†ÌÉùÏùÑ Ï∑®ÏÜåÌï®
        return;
      }

      final file = File(result.files.single.path!);
      final jsonString = await file.readAsString();

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
              SizedBox(width: 12),
              Text('Î≥µÏõê Ï§ë...'),
            ],
          ),
          duration: Duration(seconds: 10),
        ),
      );

      // JSONÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î≥µÏõê
      final restoredCount = await DatabaseService.importFromJson(jsonString);

      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();

        if (restoredCount > 0) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white),
                  const SizedBox(width: 12),
                  Text('$restoredCountÍ∞ú ÏùºÍ∏∞Í∞Ä Î≥µÏõêÎêòÏóàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.info, color: Colors.white),
                  SizedBox(width: 12),
                  Text('Î≥µÏõêÎêú ÏùºÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.orange,
              duration: Duration(seconds: 3),
            ),
          );
        }
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Î≥µÏõê Ïã§Ìå®: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }

  void _showCloudBackupDialog(BuildContext context) {
    print('=== _showCloudBackupDialog Ìò∏Ï∂úÎê® ===');
    final scaffoldContext = context;  // ÏõêÎûò Scaffold context Ï†ÄÏû•
    showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.cloud_upload, color: Colors.blue),
            SizedBox(width: 8),
            Text('Google Drive Î∞±ÏóÖ'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Google DriveÏóê ÏùºÍ∏∞ Îç∞Ïù¥ÌÑ∞Î•º ÏïàÏ†ÑÌïòÍ≤å Î∞±ÏóÖÌï©ÎãàÎã§.'),
            const SizedBox(height: 12),
            const Text('Ìè¨Ìï® ÎÇ¥Ïö©:', style: TextStyle(fontWeight: FontWeight.w600)),
            const SizedBox(height: 8),
            _buildBackupItem('üìù', 'Î™®Îì† ÏùºÍ∏∞ ÎÇ¥Ïö©'),
            _buildBackupItem('üòä', 'Í∞êÏ†ï Î∂ÑÏÑù Í≤∞Í≥º'),
            _buildBackupItem('üñºÔ∏è', 'ÏÉùÏÑ±Îêú Ïù¥ÎØ∏ÏßÄ (base64)'),
            _buildBackupItem('üé®', 'Ïù¥ÎØ∏ÏßÄ Ïä§ÌÉÄÏùº Î∞è ÏÑ§Ï†ï'),
            _buildBackupItem('üì∏', 'ÏóÖÎ°úÎìúÌïú ÏÇ¨ÏßÑÎì§'),
            const SizedBox(height: 12),
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: const Row(
                children: [
                  Icon(Icons.info_outline, size: 16, color: Colors.blue),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Í∏∞Ï°¥ Î∞±ÏóÖÏù¥ ÏûàÎã§Î©¥ ÎçÆÏñ¥Ïì∞Í∏∞Îê©ÎãàÎã§',
                      style: TextStyle(fontSize: 12, color: Colors.blue),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text('Ï∑®ÏÜå'),
          ),
          FilledButton.icon(
            onPressed: () async {
              Navigator.pop(dialogContext);
              await _performCloudBackup(scaffoldContext);  // Scaffold context ÏÇ¨Ïö©
            },
            icon: const Icon(Icons.cloud_upload),
            label: const Text('Î∞±ÏóÖ ÏãúÏûë'),
          ),
        ],
      ),
    );
  }

  Future<void> _performCloudBackup(BuildContext context) async {
    print('=== _performCloudBackup ÏãúÏûë ===');
    try {
      // Î°úÏª¨ Mock ÏÇ¨Ïö©Ïûê ÌôïÏù∏ (ÌÖåÏä§Ìä∏ Î™®Îìú)
      final mockUser = AuthService.currentUser;
      final isTestMode = mockUser != null && mockUser.uid.startsWith('local-mock-');
      print('mockUser: ${mockUser?.uid}');
      print('isTestMode: $isTestMode');

      // Firebase ÏÇ¨Ïö©Ïûê ÎòêÎäî Î°úÏª¨ Mock ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      User? firebaseUser;
      try {
        firebaseUser = FirebaseAuth.instance.currentUser;
      } catch (e) {
        // Firebase Ï¥àÍ∏∞Ìôî Ïïà Îêú Í≤ΩÏö∞ Î¨¥Ïãú
        firebaseUser = null;
      }

      if (firebaseUser == null && mockUser == null) {
        print('Î°úÍ∑∏Ïù∏ ÌïÑÏöî - SnackBar ÌëúÏãú');

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                Icon(Icons.error, color: Colors.white),
                SizedBox(width: 12),
                Expanded(
                  child: Text('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.\nÎ®ºÏ†Ä Ïï±Ïóê Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.'),
                ),
              ],
            ),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 4),
          ),
        );
        return;
      }

      // ÌÖåÏä§Ìä∏ Î™®ÎìúÏù∏ Í≤ΩÏö∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò
      if (isTestMode) {
        print('ÌÖåÏä§Ìä∏ Î™®Îìú - Î∞±ÏóÖ ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë');
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Row(
              children: [
                SizedBox(
                  width: 16,
                  height: 16,
                  child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
                ),
                SizedBox(width: 12),
                Text('Google Drive Î∞±ÏóÖ Ï§ë...'),
              ],
            ),
            duration: Duration(seconds: 2),
          ),
        );

        await Future.delayed(const Duration(seconds: 2));

        if (context.mounted) {
          ScaffoldMessenger.of(context).clearSnackBars();
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 12),
                  Expanded(child: Text('Î∞±ÏóÖ ÏôÑÎ£å (ÌÖåÏä§Ìä∏ Î™®Îìú)')),
                ],
              ),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
        }
        return;
      }

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
              SizedBox(width: 12),
              Text('ÌÅ¥ÎùºÏö∞ÎìúÏóê Î∞±ÏóÖ Ï§ë...'),
            ],
          ),
          duration: Duration(seconds: 30),
        ),
      );

      final success = await GoogleDriveService.uploadBackup(isPremium: true);

      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();

        if (success) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 12),
                  Text('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 3),
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.error, color: Colors.white),
                  SizedBox(width: 12),
                  Text('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.red,
              duration: Duration(seconds: 3),
            ),
          );
        }
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Ïò§Î•ò: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }

  void _showCloudRestoreDialog(BuildContext context) async {
    final scaffoldContext = context;  // ÏõêÎûò Scaffold context Ï†ÄÏû•

    // Î°úÏª¨ Mock ÏÇ¨Ïö©Ïûê ÌôïÏù∏ (ÌÖåÏä§Ìä∏ Î™®Îìú)
    final mockUser = AuthService.currentUser;
    final isTestMode = mockUser != null && mockUser.uid.startsWith('local-mock-');

    // Firebase ÏÇ¨Ïö©Ïûê ÎòêÎäî Î°úÏª¨ Mock ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
    User? firebaseUser;
    try {
      firebaseUser = FirebaseAuth.instance.currentUser;
    } catch (e) {
      // Firebase Ï¥àÍ∏∞Ìôî Ïïà Îêú Í≤ΩÏö∞ Î¨¥Ïãú
      firebaseUser = null;
    }

    if (firebaseUser == null && mockUser == null) {
      if (scaffoldContext.mounted) {
        showDialog(
          context: scaffoldContext,
          builder: (dialogContext) => AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.error, color: Colors.orange),
                SizedBox(width: 8),
                Text('Î°úÍ∑∏Ïù∏ ÌïÑÏöî'),
              ],
            ),
            content: const Text('ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõêÏùÑ ÏÇ¨Ïö©ÌïòÎ†§Î©¥ Î®ºÏ†Ä Ïï±Ïóê Î°úÍ∑∏Ïù∏Ìï¥Ï£ºÏÑ∏Ïöî.'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(dialogContext),
                child: const Text('ÌôïÏù∏'),
              ),
            ],
          ),
        );
      }
      return;
    }

    // ÌÖåÏä§Ìä∏ Î™®ÎìúÏù∏ Í≤ΩÏö∞ ÏãúÎÆ¨Î†àÏù¥ÏÖò
    if (isTestMode) {
      if (scaffoldContext.mounted) {
        showDialog(
          context: scaffoldContext,
          builder: (dialogContext) => AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.cloud_download, color: Colors.green),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    '[ÌÖåÏä§Ìä∏] Î≥µÏõê',
                    style: TextStyle(fontSize: 18),
                  ),
                ),
              ],
            ),
            content: const SingleChildScrollView(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('ÌÖåÏä§Ìä∏ Î™®ÎìúÏóêÏÑú Î≥µÏõêÏùÑ ÏãúÎÆ¨Î†àÏù¥ÏÖòÌï©ÎãàÎã§.'),
                  SizedBox(height: 8),
                  Text(
                    'Ïã§Ï†ú ÌôòÍ≤ΩÏóêÏÑúÎäî Google DriveÏóêÏÑú Î≥µÏõêÌï©ÎãàÎã§.',
                    style: TextStyle(fontSize: 11, color: Colors.grey),
                  ),
                ],
              ),
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(dialogContext),
                child: const Text('Ï∑®ÏÜå'),
              ),
              FilledButton.icon(
                onPressed: () async {
                  Navigator.pop(dialogContext);
                  await _performCloudRestoreSimulation(scaffoldContext);  // Scaffold context ÏÇ¨Ïö©
                },
                icon: const Icon(Icons.cloud_download),
                label: const Text('ÏãúÏûë'),
                style: FilledButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
        );
      }
      return;
    }

    final hasBackup = await GoogleDriveService.hasBackup();

    if (!hasBackup) {
      if (scaffoldContext.mounted) {
        showDialog(
          context: scaffoldContext,
          builder: (dialogContext) => AlertDialog(
            title: const Row(
              children: [
                Icon(Icons.info_outline, color: Colors.orange),
                SizedBox(width: 8),
                Text('Î∞±ÏóÖ ÏóÜÏùå'),
              ],
            ),
            content: const Text('ÌÅ¥ÎùºÏö∞ÎìúÏóê Ï†ÄÏû•Îêú Î∞±ÏóÖÏù¥ ÏóÜÏäµÎãàÎã§.\nÎ®ºÏ†Ä Î∞±ÏóÖÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.'),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(dialogContext),
                child: const Text('ÌôïÏù∏'),
              ),
            ],
          ),
        );
      }
      return;
    }

    if (scaffoldContext.mounted) {
      showDialog(
        context: scaffoldContext,
        builder: (dialogContext) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.cloud_download, color: Colors.green),
              SizedBox(width: 8),
              Text('ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('FirebaseÏóêÏÑú ÏùºÍ∏∞ Îç∞Ïù¥ÌÑ∞Î•º Î≥µÏõêÌï©ÎãàÎã§.'),
              const SizedBox(height: 12),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.orange),
                ),
                child: const Row(
                  children: [
                    Icon(Icons.warning, color: Colors.orange, size: 20),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'ÌòÑÏû¨ Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞Îäî Î™®Îëê ÏÇ≠Ï†úÎêòÍ≥†\nÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ Îç∞Ïù¥ÌÑ∞Î°ú ÎåÄÏ≤¥Îê©ÎãàÎã§',
                        style: TextStyle(fontSize: 13, color: Colors.orange),
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(dialogContext),
              child: const Text('Ï∑®ÏÜå'),
            ),
            FilledButton.icon(
              onPressed: () async {
                Navigator.pop(dialogContext);
                await _performCloudRestore(scaffoldContext);  // Scaffold context ÏÇ¨Ïö©
              },
              icon: const Icon(Icons.cloud_download),
              label: const Text('Î≥µÏõê ÏãúÏûë'),
              style: FilledButton.styleFrom(backgroundColor: Colors.green),
            ),
          ],
        ),
      );
    }
  }

  Future<void> _performCloudRestore(BuildContext context) async {
    try {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              SizedBox(
                width: 16,
                height: 16,
                child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
              ),
              SizedBox(width: 12),
              Text('ÌÅ¥ÎùºÏö∞ÎìúÏóêÏÑú Î≥µÏõê Ï§ë...'),
            ],
          ),
          duration: Duration(seconds: 30),
        ),
      );

      final restoredCount = await GoogleDriveService.downloadAndRestoreBackup();

      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();

        if (restoredCount > 0) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Row(
                children: [
                  const Icon(Icons.check_circle, color: Colors.white),
                  const SizedBox(width: 12),
                  Text('$restoredCountÍ∞ú ÏùºÍ∏∞Í∞Ä Î≥µÏõêÎêòÏóàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.green,
              duration: const Duration(seconds: 3),
            ),
          );
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Row(
                children: [
                  Icon(Icons.error, color: Colors.white),
                  SizedBox(width: 12),
                  Text('ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõêÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§'),
                ],
              ),
              backgroundColor: Colors.red,
              duration: Duration(seconds: 3),
            ),
          );
        }
      }
    } catch (e) {
      if (context.mounted) {
        ScaffoldMessenger.of(context).clearSnackBars();
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê Ïò§Î•ò: $e'),
            backgroundColor: Colors.red,
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }

  Future<void> _performCloudRestoreSimulation(BuildContext context) async {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Row(
          children: [
            SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(strokeWidth: 2, color: Colors.white),
            ),
            SizedBox(width: 12),
            Text('[ÌÖåÏä§Ìä∏ Î™®Îìú] ÌÅ¥ÎùºÏö∞Îìú Î≥µÏõê ÏãúÎÆ¨Î†àÏù¥ÏÖò Ï§ë...'),
          ],
        ),
        duration: Duration(seconds: 2),
      ),
    );

    await Future.delayed(const Duration(seconds: 2));

    if (context.mounted) {
      ScaffoldMessenger.of(context).clearSnackBars();
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.white),
              SizedBox(width: 12),
              Expanded(child: Text('Î≥µÏõê ÏôÑÎ£å (ÌÖåÏä§Ìä∏ Î™®Îìú)')),
            ],
          ),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 3),
        ),
      );
    }
  }

  void _showPremiumRequiredDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.diamond, color: Colors.amber),
            SizedBox(width: 8),
            Text('ÌîÑÎ¶¨ÎØ∏ÏóÑ Ï†ÑÏö© Í∏∞Îä•'),
          ],
        ),
        content: const Text('ÌÅ¥ÎùºÏö∞Îìú Î∞±ÏóÖ/Î≥µÏõêÏùÄ ÌîÑÎ¶¨ÎØ∏ÏóÑ ÏÇ¨Ïö©ÏûêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÌôïÏù∏'),
          ),
        ],
      ),
    );
  }
}
